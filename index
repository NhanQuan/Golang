{{ define "Index" }}
  {{ template "Header" }}
    {{ template "Menu"  }}
    <h2> Registered </h2>
    <table border="1">
      <thead>
      <tr>
        <td>ID</td>
        <td>Name</td>
        <td>City</td>
        <td>View</td>
        <td>Edit</td>
        <td>Delete</td>
      </tr>
       </thead>
       <tbody>
    {{ range . }}
      <tr>
        <td>{{ .Id }}</td>
        <td> {{ .Name }} </td>
        <td>{{ .City }} </td> 
        <td><a href="/show?id={{ .Id }}">View</a></td>
        <td><a href="/edit?id={{ .Id }}">Edit</a></td>
        <td><a href="/delete?id={{ .Id }}">Delete</a><td>
      </tr>
    {{ end }}
       </tbody>
    </table>
  {{ template "Footer" }}
{{ end }}
multiple-value regexp.MatchString() in single-value context git
// Golang program to show how
// to use command-line arguments
package main

import (
	"fmt"
	"os"
)

func main() {

	// The first argument
	// is always program name
	myProgramName := os.Args[0]

	// this will take 4
	// command line arguments
	cmdArgs := os.Args[4]

	// getting the arguments
	// with normal indexing
	gettingArgs := os.Args[2]

	toGetAllArgs := os.Args[1:]

	// it will display
	// the program name
	fmt.Println(myProgramName)
	
	fmt.Println(cmdArgs)
	
	fmt.Println(gettingArgs)
	
	fmt.Println(toGetAllArgs)
}
package main

import (
    "fmt"
    "time"
)

func main() {
    t := time.Now()
    y, mon, d := t.Date()
    h, m, s := t.Clock()
    fmt.Println("Year: ", y)
    fmt.Println("Month: ", mon)
    fmt.Println("Day: ", d)
    fmt.Println("Hour: ", h)
    fmt.Println("Minute: ", m)
    fmt.Println("Second: ", s)
}
